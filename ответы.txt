1)
srs_mean: 50.6
srs_se: 6.8851
ci_upper: 64.6455
ci_lower: 36.5545
crs_mean: 50.6
crs_se: 7.6243
d_value: 1.1074
d_squared: 1.2263
roh: 0.2263
Neff: 13.0477

------------------------------------------------------
2)
n=10
Cost Function (Round): 895241
Optimal Theta parameter (Round): [2167, -54, 839, -47, -31, 1001, 1080, 436, 283]

n=100
Cost Function (Round): 42271
Optimal Theta parameter (Round): [3328, 50, 230, 125, 192, 1244, 1897, 18, 63]

n=1000
Cost Function (Round): 1261
Optimal Theta parameter (Round): [3328, -17, -520, 119, 228, 1231, 2651, -64, 200]

------------------------------------------------------
3)
N=100, alpha=0.1, lambda=0.1
Cost function (rounded up to 2 digits after floating point): 0.28
Optimal theta parameter maximum value (rounded up to 2 digits after floating point): 1.61

N=1000, alpha=0.2, lambda=1
Cost function (rounded up to 2 digits after floating point): 0.16
Optimal theta parameter maximum value (rounded up to 2 digits after floating point): 4.59

N=10000, alpha=0.3, lambda=10
Cost function (rounded up to 2 digits after floating point): 0.33
Optimal theta parameter maximum value (rounded up to 2 digits after floating point): 2.02

Number of ones in the first 10 rows of predictions (threshold=0.5): 6


------------------------------------------------------
4)
Final Predictions: [[0.5],[0.5]]
a4 = [0.5, 0.5]
a3_min = 0.999
W4_max = 0.15
W3_min = 0.19
Loss after 10000 epochs: 0.5
General Conclusion after 10000 epochs: NN predicts image of dog

------------------------------------------------------

5)
a) Accuracy: 0.567

b) Precision and Recall for each class:

Metrics table format:

Class | Precision | Recall | F1-score
-----------------------------------
a     0.3     0.5    0.375
b     0.6     0.5    0.545
c     0.8     0.667    0.727


------------------------------------------------------
6)
A: Borrowing and Returning Books
B: Fine Management
C: Reports and Analytics
D: Performance Requirements
E: Security Requirements
F: Usability Requirements

------------------------------------------------------
7)
Age Group: 18-24
1. Count: 227
2. Proportion (p): 0.1513
3. Standard Error (SE): 0.0093
4. 95% CI (Unadjusted): [0.1332, 0.1695]
5. Intraclass Correlation (rho): 0.02
6. Average Cluster Size (m): 5
7. Design Effect (DEFF): 1.0800
8. Adjusted Standard Error (SE_adj): 0.0096
9. 95% CI (Adjusted): [0.1325, 0.1702]

Age Group: 55-64
1. Count: 212
2. Proportion (p): 0.1413
3. Standard Error (SE): 0.0090
4. 95% CI (Unadjusted): [0.1237, 0.1590]
5. Intraclass Correlation (rho): 0.018
6. Average Cluster Size (m): 5
7. Design Effect (DEFF): 1.0720
8. Adjusted Standard Error (SE_adj): 0.0093
9. 95% CI (Adjusted): [0.1231, 0.1596]


8)
private String strCustomerName; → Hungarian
public Customer(int customerID, String customerName, String email) → Pascal
public String getEmail() { return strEmail; } → Hungarian
private String strSKU; → Acronym
private Product prodItem; → Hungarian
public void AddOrderItem(OrderItem orderItem) → Pascal
private String strOTP; → Acronym


9)
A Integration Testing (since it involves component interaction).
B Stress Testing (since it evaluates system stability under high loads).
class TestOrder	Integration Testing
def test_order_under_repeated_processing	Stress Testing

10)
A	Ok Case	Correct implementation of Bubble Sort.
B	Missing Semicolon	Missing semicolon after int temp = arr[j].
C	Incorrect Comparison Index	arr[j] > arr[i] should be arr[j] > arr[j+1].
D	Index Out of Range Bug	j <= n - i - 1 should be j < n - i - 1 to avoid accessing arr[j+1] out of bounds.
E	Undefined Variable	return fib; should be return c;, fib is not declared.
F	Logic Error in Fibonacci Loop	The loop should iterate i <= n instead of i < n.
G	Missing Semicolon	Missing semicolon after throw new ArgumentException("Input must be non-negative").
H	Ok Case	Correct Fibonacci implementation, expected output 55.